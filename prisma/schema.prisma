// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Player related models

enum ChatChannels {
  SERVER
  GLOBAL
  LOCAL
  PARTY
}

model Player {
  uuid     String @id
  username String

  punishments Punishment[]

  friends   Player[] @relation("userHasFriends")
  friendsOf Player[] @relation("userHasFriends")

  perms      Permission[]
  permGroups PermGroup[]

  chatChannel ChatChannels @default(SERVER)

  discordUser   DiscordUser? @relation(fields: [discordUserId], references: [id])
  discordUserId String?

  lastSeen  DateTime  @default(now())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  server     Server? @relation(fields: [serverName], references: [name])
  serverName String?

  party   Party? @relation("partyOwner")
  partyId Int?

  memberOfParty   Party? @relation(fields: [memberOfPartyId], references: [id])
  memberOfPartyId Int?
}

model DiscordUser {
  id          String   @id
  discordId   String
  discordRole String   @default("Visiteur")
  Player      Player[]
}

model Party {
  id   Int    @id @default(autoincrement())
  name String @default("Unnamed party")

  owner     Player @relation("partyOwner", fields: [ownerUuid], references: [uuid])
  ownerUuid String @unique

  members Player[]

  public    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Punishment related models

enum PunishmentType {
  WARN
  TEMPMUTE
  MUTE
  TEMPBAN
  BAN
}

model Punishment {
  id         Int            @id @default(autoincrement())
  type       PunishmentType
  reason     String?
  punisher   Player?        @relation(fields: [playerUuid], references: [uuid])
  expires    DateTime?
  playerUuid String?
}

// Permission related models

model PermGroup {
  name        String       @id @default("Unnamed group")
  permissions Permission[]

  prefix String  @default("")
  color  String  @default("&7")
  bold   Boolean @default(false)

  priority Int @default(0)

  defaultGroup Boolean @default(false)

  parentGroup     PermGroup? @relation("groupHasParent", fields: [parentGroupName], references: [name])
  parentGroupName String?

  childGroups PermGroup[] @relation("groupHasParent")

  players Player[]
}

model Permission {
  name       String      @id
  expires    DateTime?
  players    Player[]
  permGroups PermGroup[]
}

// Game related models

enum GameStatus {
  WAITING
  STARTING
  INGAME
  ENDING
}

model Game {
  name      String @id
  color     String @default("&7")
  ludosGame String

  menuMaterial    String
  menuDescription String @default("No description")
  menuOrder       Int    @default(0)

  minQueueToStart Int @default(1)
  maxPlayers      Int @default(8)

  template Template @relation(fields: [templateName], references: [name], onDelete: Cascade)

  permissionToPlay String

  available Boolean @default(false)

  gameServers          GameServer[] @relation("gameServers")
  requestedGameServers GameServer[] @relation("requestedGameServers")
  templateName         String
}

// Server related models

model Template {
  name       String   @id
  repository String
  games      Game[]
  servers    Server[]
}

model Server {
  name String @id

  template Template @relation(fields: [templateName], references: [name], onDelete: Cascade)

  address String

  players    Player[]
  maxPlayers Int      @default(16)

  permissionToJoin String

  ready     Boolean @default(false)
  permanent Boolean @default(false)

  lastHeartbeat DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gameServer   GameServer?
  templateName String
}

model GameServer {
  server     Server @relation(fields: [serverName], references: [name], onDelete: Cascade)
  serverName String @unique

  game     Game   @relation("gameServers", fields: [gameName], references: [name])
  gameName String

  requestedGame     Game?   @relation("requestedGameServers", fields: [requestedGameName], references: [name])
  requestedGameName String?

  status GameStatus @default(WAITING)
}

// API related models

enum ApiScope {
  SERVER
  PLAYERS
  PERMISSIONS
  GROUPS
  PUNISHMENTS
  GAMES
  GAMESERVERS
  CHAT
  QUEUES
  ALL
}

model ApiKey {
  key         String     @id
  description String     @default("No description")
  scopes      ApiScope[]
  expires     DateTime?
}
