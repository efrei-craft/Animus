// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Player related models

enum ChatChannels {
  SERVER
  GLOBAL
  LOCAL
  PARTY
}

model Player {
  uuid String @id
  username String

  punishments Punishment[]

  friends   Player[] @relation("userHasFriends")
  friendsOf Player[] @relation("userHasFriends")

  perms      Permission[]
  permGroups PermGroup[]

  chatChannel ChatChannels @default(SERVER)

  discordUser   DiscordUser? @relation(fields: [discordUserId], references: [id])
  discordUserId String?

  lastSeen  DateTime  @default(now())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  gameServer           GameServer? @relation(fields: [gameServerName], references: [name])
  gameServerName String?

  party   Party? @relation("partyOwner")
  partyId Int?

  memberOfParty   Party? @relation(fields: [memberOfPartyId], references: [id])
  memberOfPartyId Int?
}

model DiscordUser {
  id          String   @id
  discordId   String
  discordRole String   @default("Visiteur")
  Player      Player[]
}

model Party {
  id   Int    @id @default(autoincrement())
  name String @default("Unnamed party")

  owner     Player @relation("partyOwner", fields: [ownerUuid], references: [uuid])
  ownerUuid String @unique

  members Player[]

  public    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Punishment related models

enum PunishmentType {
  WARN
  TEMPMUTE
  MUTE
  TEMPBAN
  BAN
}

model Punishment {
  id         Int            @id @default(autoincrement())
  type       PunishmentType
  reason     String?
  punisher   Player?        @relation(fields: [playerUuid], references: [uuid])
  expires    DateTime?
  playerUuid String?
}

// Permission related models

model PermGroup {
  id          Int          @id @default(autoincrement())
  name        String       @default("Unnamed group")
  permissions Permission[]

  prefix String  @default("")
  color  String  @default("&7")
  bold   Boolean @default(false)

  defaultGroup Boolean @default(false)

  parentGroup PermGroup?  @relation("groupHasParent", fields: [parentGroupId], references: [id])
  parentGroupId Int?

  childGroups PermGroup[] @relation("groupHasParent")

  player      Player?     @relation(fields: [playerUuid], references: [uuid])
  playerUuid  String?
}

model Permission {
  name        String     @id
  player      Player?    @relation(fields: [playerUuid], references: [uuid])
  playerUuid  String?
  permGroup   PermGroup? @relation(fields: [permGroupId], references: [id])
  permGroupId Int?
}

// Game related models

enum Template {
  MINI
}

enum GameStatus {
  WAITING
  STARTING
  INGAME
  ENDING
}

model Game {
  name      String @id
  color     String @default("&7")
  ludosGame String
  material  String

  minQueueToStart Int @default(1)
  maxPlayers      Int @default(8)

  template Template @default(MINI)

  gameServers          GameServer[] @relation("gameServers")
  requestedGameServers GameServer[] @relation("requestedGameServers")
}

// Server related models

model GameServer {
  name String @id

  game     Game   @relation("gameServers", fields: [gameName], references: [name])
  gameName String

  requestedGame     Game?   @relation("requestedGameServers", fields: [requestedGameName], references: [name])
  requestedGameName String?

  template Template @default(MINI)

  address String
  status  GameStatus @default(WAITING)

  players Player[]

  ready Boolean @default(false)

  permanent Boolean @default(false)

  lastHeartbeat DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// API related models

enum ApiScope {
  SERVER
  PLAYERS
  GROUPS
  PUNISHMENTS
  GAMES
  GAMESERVERS
}

model ApiKey {
  key     String     @id
  scopes  ApiScope[]
  expires DateTime?
}
