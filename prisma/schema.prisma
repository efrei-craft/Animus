// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Player related models

enum ChatChannels {
  SERVER
  GLOBAL
  LOCAL
  PARTY
}

model Player {
  uuid     String @id
  username String

  punishments Punishment[]

  friends   Player[] @relation("userHasFriends")
  friendsOf Player[] @relation("userHasFriends")

  perms      Permission[] @relation("playerHasPermission")
  permGroups PermGroup[]  @relation("playerHasGroup")

  chatChannel ChatChannels @default(SERVER)

  lastSeen  DateTime  @default(now())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  server     Server? @relation(fields: [serverName], references: [name])
  serverName String?

  party   Party? @relation("partyOwner")
  partyId Int?

  memberOfParty   Party? @relation(fields: [memberOfPartyId], references: [id])
  memberOfPartyId Int?

  invitedToParty Party[] @relation("partyInvited")

  member          Member? @relation(fields: [memberDiscordId], references: [discordId])
  memberDiscordId String? @unique
}

model Member {
  discordId String  @id
  firstName String?
  lastName  String?
  promo     Int?
  player    Player?
}

model Party {
  id   Int    @id @default(autoincrement())
  name String @default("Unnamed party")

  owner     Player @relation("partyOwner", fields: [ownerUuid], references: [uuid])
  ownerUuid String @unique

  members Player[]
  invited Player[] @relation("partyInvited")

  public    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Punishment related models

enum PunishmentType {
  WARN
  TEMPMUTE
  MUTE
  TEMPBAN
  BAN
}

model Punishment {
  id           Int            @id @default(autoincrement())
  type         PunishmentType
  reason       String?
  punisher     Player?        @relation(fields: [punisherUuid], references: [uuid])
  punisherUuid String?
  expires      DateTime?
}

// Permission related models

model PermGroup {
  id          Int          @id @default(autoincrement())
  name        String       @unique @default("Unnamed group")
  permissions Permission[] @relation("groupHasPermission")

  prefix String  @default("")
  color  String  @default("&7")
  bold   Boolean @default(false)

  priority Int @default(0)

  defaultGroup Boolean @default(false)

  parentGroup   PermGroup? @relation("groupHasParent", fields: [parentGroupId], references: [id])
  parentGroupId Int?

  childGroups PermGroup[] @relation("groupHasParent")

  players Player[] @relation("playerHasGroup")
}

model Permission {
  id          String    @id @default(cuid())
  name        String
  expires     DateTime?
  serverTypes String[]

  player     Player? @relation("playerHasPermission", fields: [playerUuid], references: [uuid])
  playerUuid String?

  group   PermGroup? @relation("groupHasPermission", fields: [groupId], references: [id])
  groupId Int?
}

// Game related models

enum GameStatus {
  WAITING
  STARTING
  INGAME
  ENDING
}

model Game {
  name  String @id
  color String @default("&7")

  displayName String? @default("Unnamed game")

  menuMaterial    String
  menuDescription String @default("No description")
  menuOrder       Int    @default(0)

  minQueueToStart Int @default(1)
  maxPlayers      Int @default(8)

  templates Template[]

  permissionToPlay String

  available Boolean @default(false)

  gameServers          GameServer[] @relation("gameServers")
  requestedGameServers GameServer[] @relation("requestedGameServers")
}

// Server related models

enum ServerType {
  VELOCITY
  PAPER
}

enum StorageMode {
  VOLUME
  HOST
}

model Template {
  name       String @id
  repository String

  port Int @default(25565)

  type ServerType @default(PAPER)

  autoremove Boolean @default(false)

  parentTemplate     Template? @relation("parentTemplates", fields: [parentTemplateName], references: [name])
  parentTemplateName String?

  childTemplates Template[] @relation("parentTemplates")

  games   Game[]
  servers Server[]

  static      Boolean     @default(false)
  storageMode StorageMode @default(VOLUME)

  minimumServers Int  @default(0)
  maximumServers Int?
}

model Server {
  name String @id

  template Template @relation(fields: [templateName], references: [name], onDelete: Cascade)

  address String?

  players    Player[]
  maxPlayers Int      @default(16)

  permissionToJoin String @default("")

  ready     Boolean @default(false)
  permanent Boolean @default(false)

  lastPlayerUpdate DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gameServer   GameServer?
  templateName String
}

model GameServer {
  server     Server @relation(fields: [serverName], references: [name], onDelete: Cascade)
  serverName String @unique

  game     Game?   @relation("gameServers", fields: [gameName], references: [name])
  gameName String?

  requestedGame     Game?   @relation("requestedGameServers", fields: [requestedGameName], references: [name])
  requestedGameName String?

  status GameStatus @default(WAITING)
}

// API related models

enum ApiScope {
  SERVER
  PLAYERS
  MEMBERS
  PERMISSIONS
  GROUPS
  PUNISHMENTS
  GAMES
  GAMESERVERS
  CHAT
  QUEUES
  PARTIES
  MISC
  ALL
}

model ApiKey {
  key         String     @id
  description String     @default("No description")
  scopes      ApiScope[]
  expires     DateTime?
}
