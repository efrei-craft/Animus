version: "3.8"

services:
  db:
    image: postgres:12.2
    volumes:
      - pg:/data/postgres
    networks:
      net:
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /data/postgres

  rest:
    image: docker.nexus.jiveoff.fr/efrei-craft/animus:stable
    restart: always
    tty: true
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.animus.rule=Host(`api.dev.efreicraft.fr`)"
        - "traefik.http.routers.animus.entrypoints=websecure"
        - "traefik.http.services.animus.loadbalancer.server.port=3000"
    depends_on:
      - db
      - redis
    environment:
      NODE_ENV: production

      API_HOST: ${API_HOST}
      INFRASTRUCTURE_NAME: ${INFRASTRUCTURE_NAME}
      SERVER_TYPE: rest

      DATABASE_URL: ${DATABASE_URL}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      traefik_public:
        aliases:
          - api.dev.efreicraft.fr
      net:

  worker:
    image: docker.nexus.jiveoff.fr/efrei-craft/animus:stable
    restart: always
    tty: true
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    depends_on:
      - db
      - redis
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      NODE_ENV: production

      SERVER_TYPE: worker
      INFRASTRUCTURE_NAME: ${INFRASTRUCTURE_NAME}

      DATABASE_URL: ${DATABASE_URL}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      net:

  redis:
    image: bitnami/redis:latest
    restart: always
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      net:

  adminer:
    image: adminer
    restart: always
    networks:
      net:
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.db.rule=Host(`toolkit.dev.efreicraft.fr`) && PathPrefix(`/adminer`)"
        - "traefik.http.routers.db.entrypoints=websecure"
        - "traefik.http.services.db.loadbalancer.server.port=8080"

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOST
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.db.rule=Host(`toolkit.dev.efreicraft.fr`) && PathPrefix(`/redis-commander`)"
        - "traefik.http.routers.db.entrypoints=websecure"
        - "traefik.http.services.db.loadbalancer.server.port=8081"

volumes:
  pg:
    driver: local

networks:
  net:
    name: ${INFRASTRUCTURE_NAME}
  traefik_public:
    external: true